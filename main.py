import uasyncio as asyncioimport pkg_resourcesimport picowebimport utemplateimport _threadimport wattmeterimport timeimport jsonwattmeter = wattmeter.App()DynamicIp = []StaticIp = []StaticIp.append("192.168.4.1")if(wifiManager.getIp() != None):    DynamicIp.append(wifiManager.getIp())else:    DynamicIp.append("192.168.4.1")def main(req, resp):    yield from picoweb.start_response(resp)    yield from app.render_template(resp,"main.html",(req,)) def settings(req, resp):        yield from picoweb.start_response(resp)    yield from app.render_template(resp, "settings.html", (req,))        def updateData(req, resp):    datalayer = wattmeter.datalayer.data    yield from picoweb.jsonify(resp,datalayer)def updateWificlient(req, resp):    if req.method == "POST":        datalayer = {}        yield from req.read_form_data()        for i in req.form:            i = json.loads(i)             print(i["ssid"],i["password"])               datalayer = wifiManager.handle_configure(i["ssid"],i["password"])            DynamicIp[0]=(wifiManager.getIp())            datalayer = {"process":datalayer,"ip":DynamicIp[0]}                    print("datalayer: ",datalayer)            yield from picoweb.jsonify(resp,datalayer)                    else:        datalayer = wifiManager.getSSID()        yield from picoweb.jsonify(resp,datalayer)    def dataTable(req, resp):    yield from picoweb.start_response(resp)    yield from app.render_template(resp, "datatable.html", (req,))def getEspID(req,resp):        yield from req.read_form_data()        datalayer = {"ID":"ESP"}        yield from picoweb.jsonify(resp,datalayer)          ROUTES = [    ("/", main),     ("/datatable", dataTable),    ("/updateWificlient",updateWificlient),    ("/updateData", updateData),     ("/settings", settings),    ("/getEspID", getEspID)]def threadWattmeter():    while True:        wattmeter.updateData()        time.sleep(1)  _thread.start_new_thread(threadWattmeter, ())print("Start webserver App")app = picoweb.WebApp(None, ROUTES)app.run(debug=True, host=DynamicIp[0],port=8088) #startPicoweb("static")